1. O(1) -- The time it takes to execute the function is the same regardless of any variables.
2. O(n) -- The number of times it takes to find the value is directly proportional to the number of elements.
3. O(n^2) -- For each itteration of i, an itteration of j will be invoked from the first element in i to the last
element in i. So to be more exact, the time complexity is i * j. I made the assumption that they are relatively
similar values.
4. O(2^n) -- The reccursive implementation of the fibonacci sequence algorithm has a big O of 2^n, and is an exponential
time algorithm. The upper-bound time complexity of the recursive sequence can be estimated by 2T(n-1) + C,
where T(n-1) is approximately T(n-2), hence the 2 up front, plus the constant C which accounts for the minor 
complexity operations such as comparison and addition. In it's generic form, the function reduces to 
(2^n)T(0) + (2^n-1)*C or (1+C)(2^n)-C, which follows the general big O notation of 2^n. Overall, it's very inefficient.
5. O(n) -- The iterative version of the fibonnaci sequence has a time complexity of O(n) with the number of operations
directly proportional to the size of the input.
6. O(n^2) -- Quick sort has an n^2 time complexity in the worst case scenario. This happens when the pivot
values are already sorted, creating comparison that could have been avoided using other sorting algorithms.
 